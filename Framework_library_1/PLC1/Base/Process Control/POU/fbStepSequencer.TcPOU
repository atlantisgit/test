<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="fbStepSequencer" Id="{8babe64d-6080-4eb6-874b-84824d287606}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbStepSequencer
VAR_INPUT
	iInStep:		INT;	//Constant, the step which this block instance represents
	iInNextStep:	INT;	//Next step to go to when this step is done. Will be moved into iCurrentStep when bInStepDone is true
	bInStepDone:	BOOL;	//If true and iCurrentStep = iInStep, then we move to the next step.
	tInStepDelay:	TIME;	//Time between when the bInStepDone rises to when we move states, set to 0 to disable.
	bInStepMode:	BOOL;	//This input will pause the state machine at the completion of the current step until bInStepAdvance is set high. 
	bInStepAdvance:	BOOL;	//When the state machine is paused, this input will trigger the next step.
	bInit:			BOOL;	//Initializes the state machine to step iInitStep.
	iInitStep:		INT;	//Step that the machine will be initialized to when bInit is true. 
END_VAR
VAR_OUTPUT
	bOutEnterEvent:	BOOL;	//High for one scan when the state machine enters the state specified by iInStep for a single block usage.
	bOutExitEvent:	BOOL;	//High for one scan when the state machine leaves iInStep
	bOutPaused:		BOOL;	//Indicates if the sequencer is paused and waiting on a bInStepAdvance signal. 
	iOutCurrentStep:INT;	//Current state/step
END_VAR
VAR
	bStepActive:BOOL;
	bNextStepCondition:BOOL;
	bMonitorState:BOOL;
	TONStepDelay:TON;
	latch:RS;
	rtrigStepActive:R_TRIG;
	fTrigStepActive:F_TRIG;
	rTRIG01:R_TRIG;
	rTRIG02:R_TRIG;
	i:INT;
	iActiveStep:INT;
	tofStepActive:TOF;
	tempbInStepDone:BOOL;
	tempbInStepAdvance:BOOL;
	tempbInStepMode:BOOL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//are we in the active step
(*bStepActive := iOutCurrentStep=iInStep;
rTRIG01(CLK:=bStepActive , Q=> );
IF bStepActive AND NOT(bMonitorState) THEN
	bMonitorState:=1;
	//iActiveStep:=iOutCurrentStep;
END_IF
*)

IF  (iInStep = iOutCurrentStep) THEN
	 
	TONStepDelay.IN:=1;
	tempbInStepDone:=bInStepDone;
	tempbInStepAdvance:=bInStepAdvance;
	tempbInStepMode:=bInStepMode;
	
END_IF



bNextStepCondition:= tempbInStepDone AND TONStepDelay.Q AND(NOT(tempbInStepMode) OR (tempbInStepMode AND tempbInStepAdvance));

IF 	bNextStepCondition THEN
		iOutCurrentStep:=iInNextStep;	// the current step#
		TONStepDelay.IN:=0;
END_IF

//call step delay timer
TONStepDelay(PT:=tInStepDelay);

(*
//output bOutEnterEvent
rtrigStepActive(CLK:=bMonitorState, Q=>bOutEnterEvent );

//output bOutExitEvent
ftrigStepActive(CLK:=bMonitorState, Q=>bOutExitEvent );

//bOutPaused
bOutPaused:=latch.Q1 AND (bInStepMode AND NOT(bInStepAdvance)) AND bInStepDone;
*)
IF bInit THEN
	bInit:=0;
	iOutCurrentStep:=iInitStep;
END_IF








]]></ST>
    </Implementation>
    <LineIds Name="fbStepSequencer">
      <LineId Id="192" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="263" Count="1" />
      <LineId Id="273" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="307" Count="1" />
      <LineId Id="301" Count="1" />
      <LineId Id="311" Count="1" />
      <LineId Id="309" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="266" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="135" Count="1" />
      <LineId Id="128" Count="6" />
      <LineId Id="117" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="75" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>