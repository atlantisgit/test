<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="fbStepSequencer" Id="{8babe64d-6080-4eb6-874b-84824d287606}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbStepSequencer
VAR_INPUT
	iInStep:		INT;	//Constant, the step which this block instance represents
	iInNextStep:	INT;	//Next step to go to when this step is done. Will be moved into iCurrentStep when bInStepDone is true
	bInStepDone:	BOOL;	//If true and iCurrentStep = iInStep, then we move to the next step.
	tInStepDelay:	TIME;	//Time between when the bInStepDone rises to when we move states, set to 0 to disable.
	bInStepMode:	BOOL;	//This input will pause the state machine at the completion of the current step until bInStepAdvance is set high. 
	bInStepAdvance:	BOOL;	//When the state machine is paused, this input will trigger the next step.
	bInit:			BOOL;	//Initializes the state machine to step iInitStep.
	iInitStep:		INT;	//Step that the machine will be initialized to when bInit is true. 
END_VAR
VAR_OUTPUT
	bOutEnterEvent:	BOOL;	//High for one scan when the state machine enters the state specified by iInStep for a single block usage.
	bOutExitEvent:	BOOL;	//High for one scan when the state machine leaves iInStep
	bOutPaused:		BOOL;	//Indicates if the sequencer is paused and waiting on a bInStepAdvance signal. 
	iOutCurrentStep:INT;	//Current state/step
END_VAR
VAR
	bStepActive:BOOL;
	TONStepDelay:TON;
	latch:RS;
	rtrigStepActive:R_TRIG;
	fTrigStepActive:F_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[



//update the next step the current step if step done and delay
IF bInit THEN
	iOutCurrentStep:=iInitStep;
	latch.RESET1;
ELSIF latch.Q1 AND bInStepDone AND TONStepDelay.Q 
	 AND NOT(bInit)
	 AND (NOT(bInStepMode) OR (bInStepMode AND bInStepAdvance)) THEN  // if the step is active and the stepdone is true
	iOutCurrentStep:=iInNextStep;	// the current step#
	latch.RESET1;
END_IF


//are we in the active step
bStepActive := iOutCurrentStep=iInStep;
	
latch(SET:=bStepActive , RESET1:= , Q1=> );
//call step delay timer
TONStepDelay(IN:=latch.Q1, PT:=tInStepDelay);

//output bOutEnterEvent
rtrigStepActive(CLK:=latch.Q1, Q=>bOutEnterEvent );

//output bOutExitEvent
ftrigStepActive(CLK:=latch.Q1, Q=>bOutExitEvent );

//bOutPaused
bOutPaused:=latch.Q1 AND (bInStepMode AND bInStepAdvance) AND bInStepDone;]]></ST>
    </Implementation>
    <LineIds Name="fbStepSequencer">
      <LineId Id="38" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="77" Count="6" />
      <LineId Id="75" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>