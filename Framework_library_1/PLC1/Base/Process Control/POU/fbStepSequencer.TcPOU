<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="fbStepSequencer" Id="{8babe64d-6080-4eb6-874b-84824d287606}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbStepSequencer
VAR_INPUT
	iInStep:		INT;	//Constant, the step which this block instance represents
	iInNextStep:	INT;	//Next step to go to when this step is done. Will be moved into iCurrentStep when bInStepDone is true
	bInStepDone:	BOOL;	//If true and iCurrentStep = iInStep, then we move to the next step.
	tInStepDelay:	TIME;	//Time between when the bInStepDone rises to when we move states, set to 0 to disable.
	bInStepMode:	BOOL;	//This input will pause the state machine at the completion of the current step until bInStepAdvance is set high. 
	bInStepAdvance:	BOOL;	//When the state machine is paused, this input will trigger the next step.
	bInit:			BOOL;	//Initializes the state machine to step iInitStep.
	iInitStep:		INT;	//Step that the machine will be initialized to when bInit is true. 
END_VAR
VAR_OUTPUT
	bOutEnterEvent:	BOOL;	//High for one scan when the state machine enters the state specified by iInStep for a single block usage.
	bOutExitEvent:	BOOL;	//High for one scan when the state machine leaves iInStep
	bOutPaused:		BOOL;	//Indicates if the sequencer is paused and waiting on a bInStepAdvance signal. 
	iOutCurrentStep:INT;	//Current state/step
END_VAR
VAR
	bStepActive:BOOL;
	bNextStepCondition:BOOL;
	bMonitorState:BOOL;
	TONStepDelay:TON;
	
	i:INT;
	iActiveStep:INT;
	tempbInStepDone:BOOL;
	tempbInStepAdvance:BOOL;
	tempbInStepMode:BOOL;
	temptInStepDelay:TIME;
	
	bBlipEnterEvent:BOOL;
	bBlipExitEvent: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF  (iInStep = iOutCurrentStep) THEN
	
	(*SET bOutEnterEvent on first entry to state*)
	IF NOT bBlipEnterEvent THEN
		bBlipEnterEvent:=1;
		bOutEnterEvent:=1;
	ELSE
		bOutEnterEvent:=0;
	END_IF
	
	
	temptInStepDelay:=tInStepDelay;
	tempbInStepDone:=bInStepDone;
	tempbInStepAdvance:=bInStepAdvance;
	tempbInStepMode:=bInStepMode;
	TONStepDelay.IN:=1;
	
	bNextStepCondition:=  TONStepDelay.Q AND(NOT(tempbInStepMode) OR (tempbInStepMode AND tempbInStepAdvance));
	
	IF bNextStepCondition THEN
		TONStepDelay.IN:=0;
		bBlipEnterEvent:=0;
		bOutExitEvent:=1;
			i:=i+1;
		iOutCurrentStep:=iInNextStep;
	END_IF
	
ELSE
	bOutExitEvent:=0;
END_IF





IF bInit THEN
		bInit:=0;
		iOutCurrentStep:=iInitStep;
END_IF

TONStepDelay(PT:=tInStepDelay);
]]></ST>
    </Implementation>
    <LineIds Name="fbStepSequencer">
      <LineId Id="368" Count="1" />
      <LineId Id="295" Count="0" />
      <LineId Id="497" Count="1" />
      <LineId Id="396" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="490" Count="2" />
      <LineId Id="495" Count="1" />
      <LineId Id="367" Count="0" />
      <LineId Id="404" Count="2" />
      <LineId Id="379" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="477" Count="1" />
      <LineId Id="481" Count="1" />
      <LineId Id="494" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="479" Count="1" />
      <LineId Id="302" Count="0" />
      <LineId Id="501" Count="1" />
      <LineId Id="436" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="467" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="392" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="75" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>